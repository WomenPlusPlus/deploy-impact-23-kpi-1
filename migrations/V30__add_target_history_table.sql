DROP TABLE IF EXISTS "public"."target_history";

CREATE TABLE target_history (
    target_history_id int8 generated by default as identity,
    action varchar(32) not null,
    target_id int8 not null,
    circle_id int8 not null,
    kpi_id int8 not null,
    target_value numeric,
    created_at timestamp not null,
    user_id uuid,
    PRIMARY KEY (target_history_id),
    CONSTRAINT fk_kpi FOREIGN KEY(kpi_id) REFERENCES kpi_definition(kpi_id),
    CONSTRAINT fk_circle FOREIGN KEY(circle_id) REFERENCES circle(circle_id),
    CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES auth.user(id)
);

DROP TRIGGER IF EXISTS target_history_trigger on "public"."target";

CREATE OR REPLACE FUNCTION target_history_trigger_func()
RETURNS trigger AS $body$
BEGIN
    if (TG_OP = 'INSERT') then
         INSERT INTO target_history (
             action,
             target_id ,
             circle_id ,
             kpi_id,
             target_value,
             created_at,
             user_id
         )
         VALUES(
             'INSERT',
             NEW.target_id,
             NEW.circle_id,
             NEW.kpi_id,
             NEW.target_value,
             CURRENT_TIMESTAMP,
             auth.uid()
         );

         RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
         INSERT INTO target_history (
               action,
               target_id ,
               circle_id ,
               kpi_id,
               target_value,
               created_at,
               user_id
         )
         VALUES(
             'UPDATE',
             NEW.target_id,
             NEW.circle_id,
             NEW.kpi_id,
             NEW.target_value,
             CURRENT_TIMESTAMP,
             auth.uid()
         );
         RETURN NEW;
   elsif (TG_OP = 'DELETE') then
         INSERT INTO target_history (
             action,
             target_id ,
             circle_id ,
             kpi_id,
             target_value,
             created_at,
             user_id
         )
         VALUES(
             'DELETE',
             OLD.target_id,
             OLD.circle_id,
             OLD.kpi_id,
             null,
             CURRENT_TIMESTAMP,
             auth.uid()
         );
       RETURN OLD;
   end if;
END;
$body$
LANGUAGE plpgsql;

CREATE TRIGGER target_history_trigger
AFTER INSERT OR UPDATE OR DELETE ON target
FOR EACH ROW EXECUTE FUNCTION target_history_trigger_func();